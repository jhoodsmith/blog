#+hugo_base_dir: ./
#+hugo_weight: auto
#+hugo_auto_set_lastmod: t
#+hugo_front_matter_key_replace: description>summary
#+author: James Hood-Smith

* About
:PROPERTIES:
:EXPORT_HUGO_SECTION: /
:EXPORT_FILE_NAME: about
:END:
I am a computer scientist and software developer working in and around London.
The intended audience for this blog is for the most part my future self, with the
posts serving as reminders for how to get things done.
* Blogging                                                        :@blogging:
All posts in here will have the category set to /emacs/.
** DONE Hugo blog with Org and GitHub Actions                      :hugo:org:
:PROPERTIES:
:EXPORT_FILE_NAME: creating-hugo-blog-post
:EXPORT_DATE: 2021-02-02
:END:

#+begin_description
In which I setup a working environment for writing a Hugo blog in Org with
automatic deployment using GitHub Actions.
#+end_description

*** Motivation
Like many dyed-in-the-wool Emacs users, I use [[https://orgmode.org][Org Mode]] for much of my writing. I
want a blog that I can deploy and write posts for in Org with minimum fuss.
Having heard good things about it, I want to give [[https://gohugo.io][Hugo]] a try. I also want to
have automatic deployment with [[https://github.com/features/actions][GitHub Actions]].

*** Steps

**** Installation
1. Install Hugo:
   #+BEGIN_SRC bash
   brew install hugo
   #+END_SRC

2. Setup [[https://ox-hugo.scripter.co][ox-hugo]], the Org exporter backend that exports Org to Hugo-compatible
   Markdown.

   In my case, I use [[https://github.com/jwiegley/use-package][use-package]], and so add the following to =init.el=.
   #+BEGIN_SRC elisp
   (use-package ox-hugo)
   #+END_SRC

**** Setup blog with first post
1. Create new site:
   #+BEGIN_SRC bash
     hugo new site blog
   #+END_SRC

2. Configure Emacs to automatically create markdown files after saving the org source:

   This is accomplished by adding the following Emacs Lisp expression to
   =.dir-locals.el= in the project root.
   #+BEGIN_SRC elisp
     ((org-mode . ((eval . (org-hugo-auto-export-mode)))))
   #+END_SRC

4. Add a nice theme as a git sub-module (I'm using [[https://github.com/matsuyoshi30/harbor][Harbor]]).
   #+BEGIN_SRC bash
     cd themes/
     git submodule add https://github.com/alexandrevicenzi/harbor.git
   #+END_SRC
   I want to use my blog straight away---hence my use of someone else's theme.
   In a subsequent post I look at modifying the theme, but for the time
   being I use the theme as is, and copy the configuration from the theme's 
   [[https://themes.gohugo.io/harbor/][home page in Hugo Themes]] to =config.toml=.

5. Add =blog.org= to the root of the blog directory and create your first blog post
   #+BEGIN_SRC org
     ,#+hugo_base_dir: ./
     ,#+hugo_weight: auto
     ,#+hugo_auto_set_lastmod: t
     ,#+author: James Hood-Smith

     ,* Emacs                                                              :@emacs:
     All posts in here will have the category set to /emacs/.
     ,** TODO Writing Hugo blog posts in Org                             :hugo:org:
     :PROPERTIES:
     :EXPORT_FILE_NAME: creating-hugo-blog-post
     :EXPORT_DATE: 2021-02-02
     :END:
     In which we setup our working environment for creating blog posts as sub-trees
     in a single org file.

     ,*** Installation
     ...
   #+END_SRC

   To ensure things are working well run the Hugo development server
   #+BEGIN_SRC bash
     hugo server -D --navigateToChange
   #+END_SRC
   View the blog at =http://localhost:1313=.


**** Automatic deployment to GitHub pages
1. Go to GitHub and create a repository for the source code and a repository for
   the deployed site. In my case the repositories are =blog-source= and =blog=.

2. In the "GitHub Pages" section of the settings page of the =blog= repository,
   set the source to the =main= branch.

2. Add a basic =.gitignore= file to the blog directory root
   #+BEGIN_SRC text
     # Hugo default output directory
     /public

     ## OS Files
     # Windows
     Thumbs.db
     ehthumbs.db
     Desktop.ini
     $RECYCLE.BIN/

     # OSX
     .DS_Store
   #+END_SRC

3. Update the =baseurl= property in =config.toml= to the URL of the blog.
   #+BEGIN_SRC toml
     baseurl = "https://jhoodsmith.github.io/blog/"
   #+END_SRC

4. In your account settings in GitHub, create a new personal access token (PAT)
   with read and write access to your repositories. (Skip this step if you
   already have a suitable PAT).

5. Store the PAT in the =Secrets= setting of the =blog-source= repository with
   key name =PERSONAL_TOKEN=.

7. Create a new GitHub Actions workflow in =.github/workflows/blog_deploy.yml=
   #+BEGIN_SRC yaml
     name: hugo CI

     on:
       push:
	 branches: [ main ]

     jobs:
       build:
	 runs-on: ubuntu-latest

	 steps:
	   - uses: actions/checkout@v2
	     with:
	       submodules: true 
	       fetch-depth: 1   

	   - name: Setup Hugo
	     uses: peaceiris/actions-hugo@v2
	     with:
	       hugo-version: 'latest'

	   - name: Build
	     run: hugo

	   - name: Deploy
	     uses: peaceiris/actions-gh-pages@v3
	     with:
	       personal_token: ${{ secrets.PERSONAL_TOKEN }}
	       external_repository: jhoodsmith/blog
	       publish_branch: main
	       publish_dir: ./public

   #+END_SRC

If all has gone well, then the blog should automatically be deployed to your
GitHub pages site each time you push to the =main= branch of =blog-source=.
** TODO Tweaking a Hugo theme                                      :hugo:org:
:PROPERTIES:
:EXPORT_FILE_NAME: modify-hugo-theme
:EXPORT_DATE: 2021-02-07
:END:

#+begin_description
In which I modify an existing Hugo theme to add a custom page element.
#+end_description

*** Motivation
In my [[*Hugo blog with Org and GitHub Actions][last post]] I setup a new Hugo blog with an Org and GitHub Actions workflow.
I used an off-the-shelf theme, but now want a new, custom page element---a
short, one-or-two sentence summary that sits at the top of each post.

*** Steps

**** Replace front-matter key
In line with the ox-hugo [[https://ox-hugo.scripter.co/doc/replace-front-matter-keys/][instructions]], we add the following to the top of our Org source:
#+BEGIN_SRC markdown
  ,#+hugo_front_matter_key_replace: description>summary
#+END_SRC
This ensures that the value of the Hugo =.Summary= variable equates to the Org
=Descriptio= meta data.

In each post we specify the value of =Description= in its own drawer:
#+BEGIN_SRC org
  ,** TODO Tweaking a Hugo theme                                      :hugo:org:
  :PROPERTIES:
  :EXPORT_FILE_NAME: modify-hugo-theme
  :EXPORT_DATE: 2021-02-07
  :END:

  ,#+begin_description
  In which I modify an existing Hugo theme to add a custom page element.
  ,#+end_description

  ,*** Motivation
  In my [[*Hugo blog with Org and GitHub Actions][last post]] I setup a 
  new Hugo blog ...
#+END_SRC
I place this straight after the =PROPERTIES= drawer.

**** Inserting summary above content
To combine your own site components with those from a theme, it's just a matter
of creating a file with the same name and directory structure as the file you
want to replace. In my case, I want to modify part of
=/themes/harbor/layouts/partials/toc.html=, which is where the theme author
inserts the page variable =.Content=. Hence, I put a copy of the file at
=/layouts/partials/toc.html= and modify that.

In the copy of =toc.html= I replace ={{ .Content }}= with the following.
#+BEGIN_SRC html
  {{ if eq .Type "posts" }}
  <div class="summary">
    {{ .Summary }}
  </div>
  {{ end }}
  {{ .Content }}
#+END_SRC
