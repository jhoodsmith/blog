#+hugo_base_dir: ./
#+hugo_weight: auto
#+hugo_front_matter_key_replace: description>summary
#+author: James Hood-Smith

* About
:PROPERTIES:
:EXPORT_HUGO_SECTION: /
:EXPORT_FILE_NAME: about
:END:
I am a computer scientist and software developer working in and around London.
The intended audience for this blog is for the most part my future self, with the
posts serving as reminders for how to get things done.
* Blogging                                           :@blogging:
** DONE Hugo blog with Org and GitHub Actions                      :hugo:org:
:PROPERTIES:
:EXPORT_FILE_NAME: creating-hugo-blog-post
:EXPORT_DATE: 2021-02-05
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :toc true
:END:

#+begin_description
In which I setup a working environment for writing a Hugo blog in Org with
automatic deployment using GitHub Actions.
#+end_description

*** Motivation
Like many dyed-in-the-wool Emacs users, I use [[https://orgmode.org][Org Mode]] for much of my writing. I
want a blog that I can deploy and write posts for in Org with minimum fuss.
Having heard good things about it, I want to give [[https://gohugo.io][Hugo]] a try. I also want to
have automatic deployment with [[https://github.com/features/actions][GitHub Actions]].

*** Steps
**** Installation
1. Install Hugo:
   #+BEGIN_SRC shell
   brew install hugo
   #+END_SRC

2. Setup [[https://ox-hugo.scripter.co][ox-hugo]], the Org exporter backend that exports Org to Hugo-compatible
   Markdown.

   In my case, I use [[https://github.com/jwiegley/use-package][use-package]], and so add the following to =init.el=.
   #+BEGIN_SRC elisp
   (use-package ox-hugo)
   #+END_SRC

**** Setup blog with first post
1. Create new site:
   #+BEGIN_SRC shell
     hugo new site blog
   #+END_SRC

2. Configure Emacs to automatically create markdown files after saving the org source:

   This is accomplished by adding the following Emacs Lisp expression to
   =.dir-locals.el= in the project root.
   #+BEGIN_SRC elisp
     ((org-mode . ((eval . (org-hugo-auto-export-mode)))))
   #+END_SRC

4. Add a nice theme as a git sub-module (I'm using [[https://github.com/matsuyoshi30/harbor][Harbor]]).
   #+BEGIN_SRC shell
     cd themes/
     git submodule add https://github.com/alexandrevicenzi/harbor.git
   #+END_SRC
   I want to use my blog straight away---hence my use of someone else's theme.
   In a subsequent post I look at creating a new theme from scratch, but for the
   time being I use Harbor with its default settings, hence I copy the
   configuration from the theme's [[https://themes.gohugo.io/harbor/][home page in Hugo Themes]] to =config.toml=.

5. Add =blog.org= to the root of the blog directory and create your first blog post
   #+BEGIN_SRC org
     ,#+hugo_base_dir: ./
     ,#+hugo_weight: auto
     ,#+author: James Hood-Smith

     ,* Blogging                                                        :@blogging:
     All posts in here will have the category set to /blogging/.
     ,** DONE Hugo blog with Org and GitHub Actions                      :hugo:org:
     :PROPERTIES:
     :EXPORT_FILE_NAME: creating-hugo-blog-post
     :EXPORT_DATE: 2021-02-03
     :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :toc true
     :END:

     ,#+begin_description
     In which I setup a working environment for writing a Hugo blog in Org with
     automatic deployment using GitHub Actions.
     ,#+end_description

     ,*** Motivation
     Like many dyed-in-the-wool Emacs users, I use [[https://orgmode.org][Org Mode]] ...
   #+END_SRC

   To ensure things are working well run the Hugo development server
   #+BEGIN_SRC shell
     hugo server -D --navigateToChange
   #+END_SRC
   View the blog at =http://localhost:1313=.
**** Making change to theme
***** Overwriting the Hugo .Summary page variable
Notice in the blog post source above that I made use of the Org meta data
=Description= variable. I would like this to be used in place of the Hugo page
variable =.Summary=.  To achive this I need to add the following to the top of my
Org source

#+BEGIN_SRC markdown
  ,#+hugo_front_matter_key_replace: description>summary
#+END_SRC
As explained [[https://ox-hugo.scripter.co/doc/replace-front-matter-keys/][here]], this swaps the Hugo front-matter variable with the Org meta
data variable.
***** Modifying theme layout file
To change an aspect of a Hugo theme, it's just a matter of creating a file with
the same name and directory structure as the layout file you want to replace. In
my case, I want to modify part of =/themes/harbor/layouts/partials/toc.html=,
which is where the theme author inserts the page variable =.Content=. Hence, I
copy the file to =/layouts/partials/toc.html=.

In the copy of =toc.html=, I then replace ={{ .Content }}= with the following.
#+BEGIN_SRC html
  {{ if eq .Type "posts" }}
  <div class="summary">
    {{ .Summary }}
  </div>
  {{ end }}
  {{ .Content }}
#+END_SRC
This ensures that all content files of type "posts" will have their content
prefaced with the value of =.Summary=. Following the theme author's
instructions, I have added my custom CSS to =/static/css/custom.css=.
**** Automatic deployment to GitHub pages
1. Go to GitHub and create a repository for the source code and a repository for
   the deployed site. In my case the repositories are =blog-source= and
   =jhoodsmith.github.io=.

2. Add a basic =.gitignore= file to the blog directory root
   #+BEGIN_SRC text
     # Hugo default output directory
     /public

     ## OS Files
     # Windows
     Thumbs.db
     ehthumbs.db
     Desktop.ini
     $RECYCLE.BIN/

     # OSX
     .DS_Store
   #+END_SRC

3. Update the =baseurl= property in =config.toml= to the URL of the blog.
   #+BEGIN_SRC toml
     baseurl = "https://jhoodsmith.github.io/"
   #+END_SRC

4. In your account settings in GitHub, create a new personal access token (PAT)
   with read and write access to your repositories. (Skip this step if you
   already have a suitable PAT).

5. Store the PAT in the =Secrets= setting of the =blog-source= repository with
   key name =PERSONAL_TOKEN=.

7. Create a new GitHub Actions workflow in =.github/workflows/deploy.yml=
   #+BEGIN_SRC yaml
     name: hugo CI

     on:
       push:
	 branches: [ main ]

     jobs:
       build:
	 runs-on: ubuntu-latest
	 steps:
	   - uses: actions/checkout@v2
	     with:
	       submodules: true
	       fetch-depth: 1   

	   - name: Setup Hugo
	     uses: peaceiris/actions-hugo@v2
	     with:
	       hugo-version: 'latest'

	   - name: Build
	     run: hugo --minify

	   - name: Deploy
	     uses: peaceiris/actions-gh-pages@v3
	     with:
	       personal_token: ${{ secrets.PERSONAL_TOKEN }}
	       external_repository: jhoodsmith/jhoodsmith.github.io
	       publish_branch: main
	       publish_dir: ./public
   #+END_SRC

If all has gone well, then the blog should automatically be deployed to your
GitHub pages site each time you push to the =main= branch of =blog-source=.
** TODO Creating own theme using Tailwind CSS
:PROPERTIES:
:EXPORT_FILE_NAME: custom-theme-with-tailwindcss
:EXPORT_DATE: 2021-02-05
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :toc true
:END:

#+begin_description
In which I create a new Hugo theme using Tailwind CSS and Hugo Pipes and upgrade
my GitHub actions workflow to use NPM.
#+end_description

*** Motivation
In a [[Hugo blog with Org and GitHub Actions][previous post]]
*** Install Tailwind CSS

In blog source root
#+BEGIN_SRC shell
hugo new theme jhs-tailwindcss
npm init
npm install --save-dev autoprefixer postcss postcss-cli postcss-import tailwindcss
#+END_SRC

In =config.toml=
#+BEGIN_SRC toml
...
theme = "jhs-tailwindcss"
#+END_SRC

In =themes/jhs-tailwindtheme/assets/css/postcss.config.js=
#+BEGIN_SRC js
  const themeDir = __dirname + '/../../';

  const purgecss = require('@fullhuman/postcss-purgecss')({
      // see https://gohugo.io/hugo-pipes/postprocess/#css-purging-with-postcss
      // and https://github.com/dirkolbrich/hugo-theme-tailwindcss-starter
      content: [
	  './hugo_stats.json',
	  themeDir + '/hugo_stats.json'
      ],
      defaultExtractor: (content) => {
	  let els = JSON.parse(content).htmlElements;
	  return els.tags.concat(els.classes, els.ids);
      }
  })

  module.exports = {    
      plugins: [        
	  require('postcss-import')({
	      path: [themeDir]
	  }), 
	  require('tailwindcss')(themeDir + 'assets/css/tailwind.config.js'),
	  require('autoprefixer')({
	      path: [themeDir]
	  }),
	  ...(process.env.HUGO_ENVIRONMENT === 'production' ? [purgecss] : [])
      ]
  }
#+END_SRC

#+RESULTS:

In =themes/jhs-tailwindcss/assets/css/tailwind.config.js=
#+BEGIN_SRC js
module.exports = {
  theme: {
    extend: {}
  },
  variants: {},
  plugins: []
}
#+END_SRC

In =themes/jhs-tailwindcss/assets/css/styles.scss=
#+BEGIN_SRC scss
@import "node_modules/tailwindcss/base";
@import "node_modules/tailwindcss/components";
@import "node_modules/tailwindcss/utilities";
#+END_SRC

In =themes/jhs-tailwind/layouts/partials/head.html=
#+BEGIN_SRC html
  ...
{{ $styles := resources.Get "css/styles.scss" | toCSS | postCSS (dict "config" "./assets/css/postcss.config.js") }}
{{ if .Site.IsServer }}
  <link rel="stylesheet" href="{{ $styles.RelPermalink }}">
{{ else }}
  {{ $styles := $styles | minify | fingerprint | resources.PostProcess }}
  <link rel="stylesheet" href="{{ $styles.Permalink }}" integrity="{{ $styles.Data.Integrity }}">
{{ end }}
#+END_SRC

*** Fontawesome

#+BEGIN_SRC shell
npm install --save @fortawesome/fontawesome-free
#+END_SRC

Add to =themes/jhs-tailwind/assets/js/index.js=
#+BEGIN_SRC js
  import '@fortawesome/fontawesome-free/js/fontawesome'
  import '@fortawesome/fontawesome-free/js/solid'
#+END_SRC

* General                                            :@general:
** TODO Starting from scratch
:PROPERTIES:
:EXPORT_FILE_NAME: starting-from-scratch
:EXPORT_DATE: 2021-02-12
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :toc true
:END:

#+begin_description
In which I describe the starter projects for the languages and frameworks I work
with.
#+end_description

*** Motiviation
"How do I start this again?" I often ask myself this when I start a new project.
What are the external libraries I need? What tools do I need for test-driven
development? How do I get things to play nice with my [[https://github.com/jhoodsmith/.emacs.d][Emacs configuration]].

*** Ruby (non Rails)
Create project directory
#+BEGIN_SRC shell
mkdir new-project-name
cd new-project-name
#+END_SRC

Install [[https://bundler.io][Bundler]]
#+BEGIN_SRC shell
gem install bundler
#+END_SRC
Specify dependencies in a =Gemfile=
#+BEGIN_SRC ruby
source 'https://rubygems.org'
gem 'pry'
gem 'pry-doc'
gem 'rspec'
gem 'rubocop', require: false
#+END_SRC
Install and initialise [[https://rspec.info][RSpec]]
#+BEGIN_SRC shell
bundle install
rspec --init
#+END_SRC
Add an appropriate =.gitignore= file from [[https://gitignore.io]]

*** Python
Assuming [[https://github.com/pyenv/pyenv][pyenv]] is installed, remind yourself of what versions are available on the local system
#+BEGIN_SRC shell
pyenv versions
#+END_SRC
Create a new virtual environemnt for the your chosen python version
#+BEGIN_SRC shell
pyenv virtualenv 3.7.5 new-project-name
#+END_SRC
Create project directory
#+BEGIN_SRC shell
mkdir new-project-name
cd new-project-name
#+END_SRC
Create =.python-version=
#+BEGIN_SRC shell
echo new-project-name > .python-version
#+END_SRC
Specifiy development dependencies in =requirements.txt=
#+BEGIN_SRC text
###### Working environment ######
ipython
jedi
pytest

###### Frequently used ######
numpy
pandas
requests
scikit-learn
scipy
#+END_SRC
Install packages
#+BEGIN_SRC shell
pip install -r requirements.txt
#+END_SRC
Add an appropriate =.gitignore= file from [[https://gitignore.io]]
*** Ruby on Rails 6
#+BEGIN_SRC shell
  rails new -d postgresql new-project
#+END_SRC

#+BEGIN_SRC ruby
  ...
  group :development, :test do
    ...
    gem 'byebug', platforms: [:mri, :mingw, :x64_mingw]
    gem 'factory_bot_rails'
    gem 'pry-byebug'
    gem 'pry-doc'
    gem 'rspec-rails'
    gem 'rails-controller-testing'
  end

  group :development do
    gem 'rubocop-rails'
  end

  gem 'devise'
  gem 'devise_invitable'
  gem 'tailwindcss-rails'
#+END_SRC


#+BEGIN_SRC shell
  yarn add @fortawesome/fontawesome-free
#+END_SRC

Add to =app/javascript/packs/application.js=
#+BEGIN_SRC js
import "@fortawesome/fontawesome-free/css/all"
#+END_SRC

#+BEGIN_SRC shell
  rails tailwindcss:install
  rails db:create
  rails g devise:install
  rails g devise_invitable User
#+END_SRC
